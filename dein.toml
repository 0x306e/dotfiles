[[plugins]]
repo = 'Shougo/unite.vim'

[[plugins]]
repo = 'Shougo/neomru.vim'

[[pluings]]
repo='Shougo/neosnippet.vim'

[[pluings]]
repo='Shougo/neosnippet-snippets'

[[plugins]]
repo = 'Shougo/deoplete.nvim'
depends=['nvim-yarp']
hook_add='''
    let g:deoplete#enable_at_startup=1
    set completeopt+=noinsert
    inoremap <expr><tab> pumvisible() ? "\<C-n>" :
        \ neosnippet#expandable_or_jumpable() ?
        \    "\<Plug>(neosnippet_expand_or_jump)" : "\<tab>"
'''

[[plugins]]
repo='roxma/nvim-yarp'
depends=['vim-hug-neovim-rpc']
# depends pynvim (pip3 install pynvim)

[[plugins]]
repo='roxma/vim-hug-neovim-rpc'

[[plugins]]
repo = 'Shougo/vimproc.vim'
hook_post_update = 'make'

[[plugins]]
repo = 'tomasr/molokai'

[[plugins]]
repo = 'cohama/lexima.vim'

[[plugins]]
repo = 'prabirshrestha/async.vim'

[[plugins]]
repo = 'prabirshrestha/asyncomplete.vim'
depends=['async.vim']

[[plugins]]
repo = 'prabirshrestha/asyncomplete-lsp.vim'
depends=['async.vim']

[[plugins]]
repo='prabirshrestha/asyncomplete-neosnippet.vim'
hook_add='''
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)
'''

[[plugins]]
repo='prabirshrestha/vim-lsp'
depends=['async.vim']
hook_add='''
    let g:lsp_signs_enabled = 1         " enable signs
    let g:lsp_log_verbose = 1
    let g:lsp_log_file = expand('~/.vim/lsp.log')
    let g:lsp_diagnostics_echo_cursor = 1 " enable echo under cursor when in normal mode
    let g:lsp_signs_error = {'text': '✗'}
    let g:lsp_signs_warning = {'text': '‼'}
    let g:asyncomplete_completion_delay=10

    " apt install clang-tools-x.x
    if executable('clangd')
        call lsp#register_server({
            \ 'name': 'clangd',
            \ 'cmd': {server_info->['clangd']},
            \ 'whitelist': ['c', 'cpp', 'objc', 'objcpp'],
            \ })
    endif

    " pip install python-language-server
    if executable('pyls')
        call lsp#register_server({
            \ 'name': 'pyls',
            \ 'cmd': {server_info->['pyls']},
            \ 'whitelist': ['python'],
            \ })
    endif

    " npm install typescript-language-server
    if executable('typescript-language-server')
        call lsp#register_server({
            \ 'name': 'typescript-ls',
            \ 'cmd': {server_info->['typescript-language-server --stdio']},
            \ 'whitelist': ['typescript']
        \ })
    endif

    setlocal omnifunc=lsp#complete
'''

[[plugins]]
repo='Yggdroot/indentLine'
hook_add='''
let g:indentLine_char='|'
'''

[[plugins]]
repo='scrooloose/nerdtree'
hook_add='''
    " show dotfile
    let g:NERDTreeShowHidden=1
    map <Space>n :NERDTreeToggle<CR>
'''

[[plugins]]
repo='jistr/vim-nerdtree-tabs'
hook_add='''
    let g:nerdtree_tabs_open_on_console_startup=1
'''

