[[plugins]]
repo = 'Shougo/neomru.vim'
on_source = ['unite.vim']

[[plugins]]
repo = 'lervag/vimtex'
on_ft = 'tex'
hook_source='''
    let g:vimtex_compiler_latexmk = {'options': []}
    if !exists('g:neocomplete#source#omni#input_patterns')
        let g:neocomplete#source#omni#input_patterns = {}
    endif
    let g:neocomplete#source#omni#input_patterns = g:vimtex#re#neocomplete
'''
hook_add='''
    autocmd FileType tex let b:vimtex_main = 'main.tex'
'''

[[plugins]]
repo = 'vim-latex/vim-latex'

[[plugins]]
repo= 'vim-jp/cpp-vim'
on_ft = ['c', 'cpp']

[[plugins]]
repo='roxma/nvim-yarp'
on_source = ['vim-hug-neovim-rpc']
depends=['vim-hug-neovim-rpc']
# depends pynvim (pip3 install pynvim)

[[plugins]]
repo='cespare/vim-toml'
on_ft=['toml']

[[plugins]]
repo = 'mattn/emmet-vim'
on_ft=['html', 'htm', 'css', 'jsp']
hook_add='''
let g:user_emmet_leader_key='<c-l>'
'''

[[plugins]]
repo = 'leafgarland/typescript-vim'
on_ft = ['typescript']

[[plugins]]
repo = 'vim-scripts/gnuplot-syntax-highlighting'
on_ft = 'gnuplot'

[[plugins]]
repo = 'prabirshrestha/async.vim'
on_source=['asyncomplete.vim', 'asyncomplete-lsp.vim']

[[plugins]]
repo = 'prabirshrestha/asyncomplete.vim'
depends=['async.vim']
on_source=['asymcomplete-lsp.vim']
hook_source='''
    let g:asyncomplete_enable_for_all=0
'''

[[plugins]]
repo = 'prabirshrestha/asyncomplete-lsp.vim'
depends=['async.vim']
on_source=['vim-lsp']

[[plugins]]
repo='prabirshrestha/asyncomplete-neosnippet.vim'
on_source=['asyncomplete.vim']
depends=['async.vim']
hook_add='''
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)
'''

[[plugins]]
repo='prabirshrestha/vim-lsp'
on_ft=['c', 'cpp', 'objc', 'objcpp', 'python', 'typescript']
depends=['async.vim']
hook_post_source='''
    let g:lsp_signs_enabled = 1         " enable signs
    let g:lsp_log_verbose = 1
    let g:lsp_log_file = expand('~/.vim/lsp.log')
    let g:lsp_diagnostics_echo_cursor = 1 " enable echo under cursor when in normal mode
    let g:lsp_signs_error = {'text': '✗'}
    let g:lsp_signs_warning = {'text': '‼'}
    let g:asyncomplete_completion_delay=10

    " apt install clang-tools-x.x
    if executable('clangd')
        call lsp#register_server({
            \ 'name': 'clangd',
            \ 'cmd': {server_info->['clangd']},
            \ 'whitelist': ['c', 'cpp', 'objc', 'objcpp'],
            \ })
    endif

    " pip install python-language-server
    if executable('pyls')
        call lsp#register_server({
            \ 'name': 'pyls',
            \ 'cmd': {server_info->['pyls']},
            \ 'whitelist': ['python'],
            \ })
    endif

    " npm install typescript-language-server
    if executable('typescript-language-server')
        call lsp#register_server({
            \ 'name': 'typescript-ls',
            \ 'cmd': {server_info->['typescript-language-server --stdio']},
            \ 'whitelist': ['typescript']
        \ })
    endif

    setlocal omnifunc=lsp#complete
'''

